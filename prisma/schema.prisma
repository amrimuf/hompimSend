datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum DeviceStatus {
  CONNECTED
  NOT_CONNECTED
}

enum MessageStatus {
  SENT
  FAILED
}

model User {
  pkId             Int               @id @default(autoincrement())
  id               String            @default(uuid()) @db.Uuid
  username         String            @unique @db.VarChar(128)
  phone            String            @unique @db.VarChar(20)
  email            String            @unique @db.VarChar(255)
  password         String            @db.VarChar(255)
  accountApiKey    String            @unique @map("account_api_key") @db.VarChar(128)
  googleId         String?           @unique @map("google_id") @db.VarChar(128)
  affiliationCode  String            @map("affiliation_code") @db.VarChar(128)
  emailOtpSecret   String?           @map("email_otp_secret") @db.VarChar(255)
  refreshToken     String?           @unique @map("refresh_token") @db.VarChar(255)
  createdAt        DateTime          @default(now()) @map("created_at")
  updatedAt        DateTime          @default(now()) @map("updated_at")
  deletedAt        DateTime?         @map("deleted_at")
  emailVerifiedAt  DateTime          @map("email_verfied_at")
  subscriptionId   Int               @map("subsription_id")
  privilegeId      Int               @map("privilege_id")
  subscription     Subscription      @relation(fields: [subscriptionId], references: [pkId])
  privilege        Privilege         @relation(fields: [privilegeId], references: [pkId])
  customerServices CustomerService[]
  transactions     Transaction[]
  devices          Device[]
}

model CustomerService {
  pkId        Int       @id @default(autoincrement())
  id          String    @default(uuid()) @db.Uuid
  username    String    @db.VarChar(128)
  phone       String    @db.VarChar(20)
  email       String    @db.VarChar(255)
  password    String    @db.VarChar(255)
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @default(now()) @map("updated_at")
  userId      Int
  privilegeId Int       @map("privilege_id")
  user        User      @relation(fields: [userId], references: [pkId])
  privilege   Privilege @relation(fields: [privilegeId], references: [pkId])

  @@unique([email, username, phone])
}

model Privilege {
  pkId             Int               @id @default(autoincrement())
  id               String            @default(uuid()) @db.Uuid
  name             String            @db.VarChar(128)
  isSuperadmin     Boolean           @default(false) @map("is_superadmin")
  users            User[]
  roles            PrivilegeRole[]
  customerServices CustomerService[]
  menuPrivileges   MenuPrivilege[]
}

model PrivilegeRole {
  pkId        Int       @id @default(autoincrement())
  id          String    @default(uuid()) @db.Uuid
  isVisible   Boolean
  isCreate    Boolean
  isDelete    Boolean
  isRead      Boolean
  isEdit      Boolean
  moduleId    Int       @map("module_id")
  module      Modul     @relation(fields: [moduleId], references: [pkId])
  privilege   Privilege @relation(fields: [privilegeId], references: [pkId])
  privilegeId Int       @map("privilege_id")
}

model Menu {
  pkId           Int             @id @default(autoincrement())
  id             String          @default(uuid()) @db.Uuid
  name           String          @db.VarChar(128)
  type           String          @db.VarChar(128)
  path           String          @db.VarChar(255)
  isActive       Boolean         @map("is_active")
  menuPrivileges MenuPrivilege[]
}

model MenuPrivilege {
  pkId        Int       @id @default(autoincrement())
  id          String    @default(uuid()) @db.Uuid
  menu        Menu      @relation(fields: [menuId], references: [pkId])
  menuId      Int       @map("menu_id")
  privilege   Privilege @relation(fields: [privilegeId], references: [pkId])
  privilegeId Int       @map("privilege_id")
}

model Modul {
  pkId           Int             @id @default(autoincrement())
  id             String          @default(uuid()) @db.Uuid
  name           String          @db.VarChar(128)
  controller     String          @db.VarChar(255)
  privilegeRoles PrivilegeRole[]
}

model Subscription {
  pkId         Int           @id @default(autoincrement())
  id           String        @default(uuid()) @db.Uuid
  name         String        @db.VarChar(128)
  price        Decimal       @map("price") @db.Decimal(10, 2)
  isAvailable  Boolean       @default(true) @map("is_available")
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @default(now()) @map("updated_at")
  users        User[]
  transactions Transaction[]
}

model Transaction {
  pkId           Int          @id @default(autoincrement())
  id             String       @default(uuid()) @db.Uuid
  name           String       @db.VarChar(128)
  price          Decimal      @map("price") @db.Decimal(10, 2)
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @default(now()) @map("updated_at")
  userId         Int
  subscriptionId Int
  user           User         @relation(fields: [userId], references: [pkId])
  subscription   Subscription @relation(fields: [subscriptionId], references: [pkId])
}

model Device {
  pkId             Int               @id @default(autoincrement())
  id               String            @default(uuid()) @db.Uuid
  name             String            @db.VarChar(128)
  phone            String?           @unique @db.VarChar(20)
  apiKey           String            @map("api_key") @db.VarChar(255)
  serverId         Int
  status           DeviceStatus      @default(NOT_CONNECTED) @map("status")
  labels           Json?
  createdAt        DateTime          @default(now()) @map("created_at")
  updatedAt        DateTime          @default(now()) @map("updated_at")
  businessHourId   Int?              @map("business_hour_id")
  userId           Int
  businessHour     BusinessHour?     @relation(fields: [businessHourId], references: [pkId])
  user             User              @relation(fields: [userId], references: [pkId], onDelete: Cascade)
  sessions         Session[]
  outgoingMessages OutgoingMessage[]
  incomingMessages IncomingMessage[]
  autoReplies      AutoReply[]
  campaigns        Campaign[]
  orders           Order[]
  contactDevices   ContactDevice[]
}

model Session {
  pkId      Int    @id @default(autoincrement())
  id        String @default(uuid()) @db.Uuid
  sessionId String @map("session_id") @db.VarChar(128)
  data      String
  deviceId  Int
  device    Device @relation(fields: [deviceId], references: [pkId])
}

model Contact {
  pkId           Int             @id @default(autoincrement())
  id             String          @default(uuid()) @db.Uuid
  name           String          @db.VarChar(128)
  phone          String          @unique @db.VarChar(20)
  variablesData  String?         @map("variables_data")
  createdAt      DateTime        @default(now()) @map("created_at")
  updatedAt      DateTime        @default(now()) @map("updated_at")
  contactGroups  ContactGroup[]
  contactDevices ContactDevice[]
}

model ContactGroup {
  pkId      Int     @id @default(autoincrement())
  id        String  @default(uuid()) @db.Uuid
  contactId Int
  groupId   Int
  contact   Contact @relation(fields: [contactId], references: [pkId])
  group     Group   @relation(fields: [groupId], references: [pkId])
}

model ContactDevice {
  pkId      Int     @id @default(autoincrement())
  id        String  @default(uuid()) @db.Uuid
  contactId Int
  deviceId  Int
  contact   Contact @relation(fields: [contactId], references: [pkId])
  device    Device  @relation(fields: [deviceId], references: [pkId])
}

model Group {
  pkId          Int            @id @default(autoincrement())
  id            String         @default(uuid()) @db.Uuid
  name          String         @db.VarChar(128)
  isCampaign    Boolean        @default(false) @map("is_campaign")
  contactGroups ContactGroup[]
  campaigns     Campaign[]
}

model OutgoingMessage {
  pkId      Int           @id @default(autoincrement())
  id        String        @default(uuid()) @db.Uuid
  to        String        @db.VarChar(20)
  message   String
  schedule  DateTime
  status    MessageStatus
  source    String        @db.VarChar(20)
  createdAt DateTime      @default(now()) @map("created_at")
  updatedAt DateTime      @default(now()) @map("updated_at")
  deviceId  Int
  device    Device        @relation(fields: [deviceId], references: [pkId])
}

model IncomingMessage {
  pkId       Int      @id @default(autoincrement())
  id         String   @default(uuid()) @db.Uuid
  from       String   @db.VarChar(20)
  message    String
  receivedAt DateTime
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @default(now()) @map("updated_at")
  deviceId   Int
  device     Device   @relation(fields: [deviceId], references: [pkId])
}

model AutoReply {
  pkId      Int           @id @default(autoincrement())
  id        String        @default(uuid()) @db.Uuid
  request   String        @db.VarChar(255)
  response  String        @db.VarChar(255)
  schedule  DateTime
  status    MessageStatus
  source    String
  createdAt DateTime      @default(now()) @map("created_at")
  updatedAt DateTime      @default(now()) @map("updated_at")
  deviceId  Int
  device    Device        @relation(fields: [deviceId], references: [pkId])
}

model Campaign {
  pkId                Int             @id @default(autoincrement())
  id                  String          @default(uuid()) @db.Uuid
  name                String          @db.VarChar(128)
  syntaxRegistration  String          @map("syntax_registration") @db.VarChar(255)
  registrationMessage String          @map("registration_message")
  messageRegistered   String          @map("message_registered")
  phone               String          @unique @db.VarChar(20)
  campaignMessageId   Int             @map("campaign_message_id")
  groupId             Int             @map("group_id")
  deviceId            Int             @map("device_id")
  campaignMessages    CampaignMessage @relation(fields: [campaignMessageId], references: [pkId])
  group               Group           @relation(fields: [groupId], references: [pkId])
  device              Device          @relation(fields: [deviceId], references: [pkId])
}

model CampaignMessage {
  pkId      Int        @id @default(autoincrement())
  id        String     @default(uuid()) @db.Uuid
  day       String     @db.VarChar(128)
  message   String
  sechedule DateTime   @map("sechedule")
  delay     Int
  campaigns Campaign[]
}

model BusinessHour {
  pkId     Int      @id @default(autoincrement())
  id       String   @default(uuid()) @db.Uuid
  message  String
  monStart DateTime @map("mon_start")
  monEnd   DateTime @map("mon_end")
  tueStart DateTime @map("tue_start")
  tueEnd   DateTime @map("tue_end")
  wedStart DateTime @map("wed_start")
  wedEnd   DateTime @map("wed_end")
  thuStart DateTime @map("thu_start")
  thuEnd   DateTime @map("thu_end")
  friStart DateTime @map("fri_start")
  friEnd   DateTime @map("fri_end")
  satStart DateTime @map("sat_start")
  satEnd   DateTime @map("sat_end")
  sunStart DateTime @map("sun_start")
  sunEnd   DateTime @map("sun_end")
  devices  Device[]
}

model Order {
  pkId     Int     @id @default(autoincrement())
  id       String  @default(uuid()) @db.Uuid
  name     String  @db.VarChar(128)
  address  String  @db.VarChar(255)
  phone    Int
  ongkir   Int     @map("delivery_cost")
  price    Decimal @map("price") @db.Decimal(10, 2)
  deviceId Int     @map("device_id")
  device   Device  @relation(fields: [deviceId], references: [pkId])
}

model PasswordReset {
  pkId              Int      @id @default(autoincrement())
  id                String   @default(uuid()) @db.Uuid
  email             String   @unique @db.VarChar(255)
  token             String   @db.VarChar(255)
  resetTokenExpires DateTime @map("reset_token_expires")
  createdAt         DateTime @default(now()) @map("created_at")
}
