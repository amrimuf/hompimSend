datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum DeviceStatus {
  CONNECTED
  NOT_CONNECTED
}

enum MessageStatus {
  SENT
  FAILED
}

model User {
  id               String            @id @default(uuid())
  username         String            @unique
  phone            String            @unique
  email            String            @unique
  password         String
  accountApiKey    String            @unique @map("account_api_key")
  googleId         String?           @unique @map("google_id")
  affiliationLink  String            @map("affiliation_link")
  createdAt        DateTime          @default(now()) @map("created_at")
  updatedAt        DateTime          @map("updated_at")
  subscriptionId   String            @map("subsription_id")
  privilegeId      String            @map("privilege_id")
  subscription     Subscription      @relation(fields: [subscriptionId], references: [id])
  privilege        Privilege         @relation(fields: [privilegeId], references: [id])
  customerServices CustomerService[]
  transactions     Transaction[]
  devices          Device[]
}

model CustomerService {
  id          String    @id @default(uuid())
  username    String    @unique
  phone       String    @unique
  email       String    @unique
  password    String
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @map("updated_at")
  userId      String
  privilegeId String    @map("privilege_id")
  user        User      @relation(fields: [userId], references: [id])
  privilege   Privilege @relation(fields: [privilegeId], references: [id])
}

model Privilege {
  id               String            @id @default(uuid())
  name             String
  isSuperadmin     Boolean           @default(false) @map("is_superadmin")
  users            User[]
  roles            PrivilegeRole[]
  customerServices CustomerService[]
  menuPrivileges   MenuPrivilege[]
}

model PrivilegeRole {
  id          String    @id @default(uuid())
  isVisible   Boolean
  isCreate    Boolean
  isDelete    Boolean
  isRead      Boolean
  isEdit      Boolean
  moduleId    String    @map("module_id")
  module      Modul     @relation(fields: [moduleId], references: [id])
  privilege   Privilege @relation(fields: [privilegeId], references: [id])
  privilegeId String    @map("privilege_id")
}

model Menu {
  id             String          @id @default(uuid())
  name           String
  type           String
  path           String
  isActive       Boolean         @map("is_active")
  menuPrivileges MenuPrivilege[]
}

model MenuPrivilege {
  id          String    @id @default(uuid())
  menu        Menu      @relation(fields: [menuId], references: [id])
  menuId      String    @map("menu_id")
  privilege   Privilege @relation(fields: [privilegeId], references: [id])
  privilegeId String    @map("privilege_id")
}

model Modul {
  id             String          @id @default(uuid())
  name           String
  controller     String
  privilegeRoles PrivilegeRole[]
}

model Subscription {
  id           String        @id @default(uuid())
  name         String
  price        Decimal       @map("price") @db.Decimal(10, 2)
  isAvailable  Boolean       @default(true) @map("is_available")
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @map("updated_at")
  users        User[]
  transactions Transaction[]
}

model Transaction {
  id             String       @id @default(uuid())
  name           String
  price          Decimal      @map("price") @db.Decimal(10, 2)
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @map("updated_at")
  userId         String
  subscriptionId String
  user           User         @relation(fields: [userId], references: [id])
  subscription   Subscription @relation(fields: [subscriptionId], references: [id])
}

model Device {
  id               String            @id @default(uuid())
  name             String
  phone            String            @unique
  apiKey           String            @map("api_key")
  serverId         Int
  status           DeviceStatus      @default(NOT_CONNECTED) @map("status")
  createdAt        DateTime          @default(now()) @map("created_at")
  updatedAt        DateTime          @map("updated_at")
  businessHourId   String?           @map("business_hour_id")
  userId           String
  businessHour     BusinessHour?     @relation(fields: [businessHourId], references: [id])
  user             User              @relation(fields: [userId], references: [id])
  sessions         Session[]
  outgoingMessages OutgoingMessage[]
  incomingMessages IncomingMessage[]
  autoReplies      AutoReply[]
  campaigns        Campaign[]
  orders           Order[]
  contactDevices   ContactDevice[]
}

model Session {
  id       String @id @default(uuid())
  data     String
  deviceId String
  device   Device @relation(fields: [deviceId], references: [id])
}

model Contact {
  id             String          @id @default(uuid())
  name           String
  phone          String          @unique
  variablesData  String?         @map("variables_data")
  createdAt      DateTime        @default(now()) @map("created_at")
  updatedAt      DateTime        @map("updated_at")
  contactGroups  ContactGroup[]
  contactDevices ContactDevice[]
}

model ContactGroup {
  id        String  @id @default(uuid())
  contactId String
  groupId   String
  contact   Contact @relation(fields: [contactId], references: [id])
  group     Group   @relation(fields: [groupId], references: [id])
}

model ContactDevice {
  id        String  @id @default(uuid())
  contactId String
  deviceId  String
  contact   Contact @relation(fields: [contactId], references: [id])
  device    Device  @relation(fields: [deviceId], references: [id])
}

model Group {
  id            String         @id @default(uuid())
  name          String
  isCampaign    Boolean        @default(false) @map("is_campaign")
  contactGroups ContactGroup[]
  campaigns     Campaign[]
}

model OutgoingMessage {
  id        String        @id @default(uuid())
  to        String
  message   String
  schedule  DateTime
  status    MessageStatus
  source    String
  createdAt DateTime      @default(now()) @map("created_at")
  updatedAt DateTime      @map("updated_at")
  deviceId  String
  device    Device        @relation(fields: [deviceId], references: [id])
}

model IncomingMessage {
  id         String   @id @default(uuid())
  from       String
  message    String
  receivedAt DateTime
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @map("updated_at")
  deviceId   String
  device     Device   @relation(fields: [deviceId], references: [id])
}

model AutoReply {
  id        String        @id @default(uuid())
  request   String
  response  String
  schedule  DateTime
  status    MessageStatus
  source    String
  createdAt DateTime      @default(now()) @map("created_at")
  updatedAt DateTime      @map("updated_at")
  deviceId  String
  device    Device        @relation(fields: [deviceId], references: [id])
}

model Campaign {
  id                  String          @id @default(uuid())
  name                String
  syntaxRegistration  String          @map("syntax_registration")
  registrationMessage String          @map("registration_message")
  messageRegistered   String          @map("message_registered")
  phone               String          @unique
  campaignMessageId   String          @map("campaign_message_id")
  groupId             String          @map("group_id")
  deviceId            String          @map("device_id")
  campaignMessages    CampaignMessage @relation(fields: [campaignMessageId], references: [id])
  group               Group           @relation(fields: [groupId], references: [id])
  device              Device          @relation(fields: [deviceId], references: [id])
}

model CampaignMessage {
  id        String     @id @default(uuid())
  day       String
  message   String
  sechedule DateTime   @map("sechedule")
  delay     Int
  campaigns Campaign[]
}

model BusinessHour {
  id       String   @id @default(uuid())
  message  String
  monStart DateTime @map("mon_start")
  monEnd   DateTime @map("mon_end")
  tueStart DateTime @map("tue_start")
  tueEnd   DateTime @map("tue_end")
  wedStart DateTime @map("wed_start")
  wedEnd   DateTime @map("wed_end")
  thuStart DateTime @map("thu_start")
  thuEnd   DateTime @map("thu_end")
  friStart DateTime @map("fri_start")
  friEnd   DateTime @map("fri_end")
  satStart DateTime @map("sat_start")
  satEnd   DateTime @map("sat_end")
  sunStart DateTime @map("sun_start")
  sunEnd   DateTime @map("sun_end")
  devices  Device[]
}

model Order {
  id       String  @id @default(uuid())
  name     String
  address  String
  phone    Int
  ongkir   Int     @map("delivery_cost")
  price    Decimal @map("price") @db.Decimal(10, 2)
  deviceId String  @map("device_id")
  device   Device  @relation(fields: [deviceId], references: [id])
}

model PasswordReset {
  id        String   @id @default(uuid())
  email     String   @unique
  token     String
  createdAt DateTime @default(now())
}
