datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  pkId             Int               @id @default(autoincrement())
  id               String            @unique @default(uuid()) @db.Uuid
  firstName        String            @map("first_name") @db.VarChar(128)
  lastName         String?           @map("last_name") @db.VarChar(128)
  username         String            @unique @db.VarChar(128)
  phone            String?           @unique @db.VarChar(20)
  email            String            @unique @db.VarChar(255)
  password         String            @db.VarChar(255)
  accountApiKey    String            @unique @map("account_api_key") @db.VarChar(128)
  googleId         String?           @unique @map("google_id") @db.VarChar(128)
  affiliationCode  String            @map("affiliation_code") @db.VarChar(128)
  emailOtpSecret   String?           @map("email_otp_secret") @db.VarChar(255)
  refreshToken     String?           @unique @map("refresh_token") @db.VarChar(255)
  createdAt        DateTime          @default(now()) @map("created_at")
  updatedAt        DateTime          @default(now()) @map("updated_at")
  deletedAt        DateTime?         @map("deleted_at")
  emailVerifiedAt  DateTime?         @map("email_verfied_at")
  privilegeId      Int?              @map("privilege_id")
  privilege        Privilege?        @relation(fields: [privilegeId], references: [pkId], onDelete: SetNull)
  customerServices CustomerService[]
  transactions     Transaction[]
  devices          Device[]
  Group            Group[]
  Subscription     Subscription[]
}

model CustomerService {
  pkId        Int       @id @default(autoincrement())
  id          String    @unique @default(uuid()) @db.Uuid
  username    String    @db.VarChar(128)
  phone       String    @db.VarChar(20)
  email       String    @db.VarChar(255)
  password    String    @db.VarChar(255)
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @default(now()) @map("updated_at")
  userId      Int
  privilegeId Int       @map("privilege_id")
  user        User      @relation(fields: [userId], references: [pkId])
  privilege   Privilege @relation(fields: [privilegeId], references: [pkId])

  @@unique([email, username, phone])
}

model Privilege {
  pkId             Int               @id @default(autoincrement())
  id               String            @unique @default(uuid()) @db.Uuid
  name             String            @unique @db.VarChar(128)
  isSuperadmin     Boolean           @default(false) @map("is_superadmin")
  users            User[]
  roles            PrivilegeRole[]
  customerServices CustomerService[]
  menuPrivileges   MenuPrivilege[]
}

model PrivilegeRole {
  pkId        Int       @id @default(autoincrement())
  id          String    @unique @default(uuid()) @db.Uuid
  isVisible   Boolean
  isCreate    Boolean
  isDelete    Boolean
  isRead      Boolean
  isEdit      Boolean
  moduleId    Int       @map("module_id")
  module      Modul     @relation(fields: [moduleId], references: [pkId])
  privilege   Privilege @relation(fields: [privilegeId], references: [pkId])
  privilegeId Int       @map("privilege_id")
}

model Menu {
  pkId           Int             @id @default(autoincrement())
  id             String          @unique @default(uuid()) @db.Uuid
  name           String          @db.VarChar(128)
  type           String          @db.VarChar(128)
  path           String          @db.VarChar(255)
  isActive       Boolean         @map("is_active")
  menuPrivileges MenuPrivilege[]
}

model MenuPrivilege {
  pkId        Int       @id @default(autoincrement())
  id          String    @unique @default(uuid()) @db.Uuid
  menu        Menu      @relation(fields: [menuId], references: [pkId])
  menuId      Int       @map("menu_id")
  privilege   Privilege @relation(fields: [privilegeId], references: [pkId])
  privilegeId Int       @map("privilege_id")
}

model Modul {
  pkId           Int             @id @default(autoincrement())
  id             String          @unique @default(uuid()) @db.Uuid
  name           String          @db.VarChar(128)
  controller     String          @db.VarChar(255)
  privilegeRoles PrivilegeRole[]
}

model SubscriptionPlan {
  pkId                  Int            @id @default(autoincrement())
  id                    String         @unique @default(uuid()) @db.Uuid
  name                  String         @unique @db.VarChar(128)
  monthlyPrice          Decimal        @map("monthly_price") @db.Decimal(10, 2)
  yearlyPrice           Decimal        @map("yearly_price") @db.Decimal(10, 2)
  autoReplyQuota        Int?
  broadcastQuota        Int?
  contactQuota          Int?
  deviceQuota           Int?
  isIntegration         Boolean?
  isGoogleContactSync   Boolean?
  isWhatsappContactSync Boolean?
  isAvailable           Boolean        @default(true) @map("is_available")
  createdAt             DateTime       @default(now()) @map("created_at")
  updatedAt             DateTime       @default(now()) @map("updated_at")
  transactions          Transaction[]
  Subscription          Subscription[]
}

model Subscription {
  pkId               Int              @id @default(autoincrement())
  startDate          DateTime
  endDate            DateTime
  autoReplyUsed      Int              @default(0)
  broadcastUsed      Int              @default(0)
  contactUsed        Int              @default(0)
  deviceUsed         Int              @default(0)
  autoReplyMax       Int              @default(0)
  broadcastMax       Int              @default(0)
  contactMax         Int              @default(0)
  deviceMax          Int              @default(0)
  subscriptionPlanId Int
  userId             Int
  user               User             @relation(fields: [userId], references: [pkId], onDelete: Cascade)
  createdAt          DateTime         @default(now()) @map("created_at")
  updatedAt          DateTime         @default(now()) @map("updated_at")
  subscriptionPlan   SubscriptionPlan @relation(fields: [subscriptionPlanId], references: [pkId], onDelete: Cascade)
}

model Transaction {
  pkId               Int              @id @default(autoincrement())
  id                 String           @unique @map("order_id") @db.VarChar(128)
  paidPrice          Decimal          @map("paid_price") @db.Decimal(10, 2)
  status             String?
  createdAt          DateTime         @default(now()) @map("created_at")
  updatedAt          DateTime         @default(now()) @map("updated_at")
  userId             Int
  subscriptionPlanId Int
  user               User             @relation(fields: [userId], references: [pkId], onDelete: Cascade)
  subscriptionPlan   SubscriptionPlan @relation(fields: [subscriptionPlanId], references: [pkId], onDelete: Cascade)
}

model Device {
  pkId           Int             @id @default(autoincrement())
  id             String          @unique @default(uuid()) @db.Uuid
  name           String          @db.VarChar(128)
  phone          String?         @db.VarChar(20)
  apiKey         String          @unique @map("api_key") @db.VarChar(255)
  serverId       Int
  status         String          @default("close") @map("status") @db.VarChar(20)
  createdAt      DateTime        @default(now()) @map("created_at")
  updatedAt      DateTime        @default(now()) @map("updated_at")
  businessHourId Int?            @map("business_hour_id")
  userId         Int
  businessHour   BusinessHour?   @relation(fields: [businessHourId], references: [pkId])
  user           User            @relation(fields: [userId], references: [pkId], onDelete: Cascade)
  sessions       Session[]
  autoReplies    AutoReply[]
  campaigns      Campaign[]
  orders         Order[]
  contactDevices ContactDevice[]
  DeviceLabel    DeviceLabel[]
}

model Session {
  pkId      Int    @id @default(autoincrement())
  id        String
  sessionId String
  data      String @db.Text
  deviceId  Int
  device    Device @relation(fields: [deviceId], references: [pkId], onDelete: Cascade)

  @@unique([sessionId, id], map: "unique_id_per_session_id_session")
  @@index([sessionId])
}

model Contact {
  pkId            Int               @id @default(autoincrement())
  id              String            @unique @default(uuid()) @db.Uuid
  firstName       String            @db.VarChar(128)
  lastName        String?           @db.VarChar(128)
  phone           String            @db.VarChar(20)
  email           String            @db.VarChar(255)
  gender          String            @db.VarChar(10)
  dob             DateTime          @db.Date
  colorCode       String?           @db.VarChar(6)
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @default(now()) @map("updated_at")
  contactGroups   ContactGroup[]
  contactDevices  ContactDevice[]
  ContactLabel    ContactLabel[]
  OutgoingMessage OutgoingMessage[]
  IncomingMessage IncomingMessage[]
}

model Label {
  pkId         Int            @id @unique @default(autoincrement())
  name         String         @db.VarChar(128)
  slug         String         @unique @db.VarChar(128)
  DeviceLabel  DeviceLabel[]
  ContactLabel ContactLabel[]
}

model DeviceLabel {
  pkId      Int      @id @unique @default(autoincrement())
  deviceId  Int
  labelId   Int
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  device    Device   @relation(fields: [deviceId], references: [pkId], onDelete: Cascade)
  label     Label    @relation(fields: [labelId], references: [pkId], onDelete: Cascade)

  @@unique([deviceId, labelId])
}

model ContactLabel {
  id        Int      @id @unique @default(autoincrement())
  contactId Int
  labelId   Int
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  contact   Contact  @relation(fields: [contactId], references: [pkId], onDelete: Cascade)
  label     Label    @relation(fields: [labelId], references: [pkId], onDelete: Cascade)

  @@unique([contactId, labelId])
}

model ContactGroup {
  pkId      Int     @id @default(autoincrement())
  id        String  @unique @default(uuid()) @db.Uuid
  contactId Int
  groupId   Int
  contact   Contact @relation(fields: [contactId], references: [pkId])
  group     Group   @relation(fields: [groupId], references: [pkId], onDelete: Cascade)

  @@unique([contactId, groupId])
}

model ContactDevice {
  pkId      Int     @id @default(autoincrement())
  id        String  @unique @default(uuid()) @db.Uuid
  contactId Int
  deviceId  Int
  contact   Contact @relation(fields: [contactId], references: [pkId], onDelete: Cascade)
  device    Device  @relation(fields: [deviceId], references: [pkId], onDelete: Cascade)

  @@unique([contactId, deviceId])
}

model Group {
  pkId          Int            @id @default(autoincrement())
  id            String         @unique @default(uuid()) @db.Uuid
  name          String         @db.VarChar(128)
  isCampaign    Boolean        @default(false) @map("is_campaign")
  userId        Int
  user          User           @relation(fields: [userId], references: [pkId], onDelete: Cascade)
  contactGroups ContactGroup[]
  campaigns     Campaign[]
}

model OutgoingMessage {
  pkId      Int      @id @default(autoincrement())
  id        String   @unique @default(uuid()) @db.Uuid
  to        String
  message   String
  schedule  DateTime
  status    String   @db.VarChar(20)
  source    String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")
  sessionId String
  contactId Int?
  contact   Contact? @relation(fields: [contactId], references: [pkId], onDelete: Cascade)
}

model IncomingMessage {
  pkId       Int      @id @default(autoincrement())
  id         String   @unique @default(uuid()) @db.Uuid
  from       String
  message    String
  receivedAt DateTime @map("received_at")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @default(now()) @map("updated_at")
  sessionId  String
  contactId  Int?
  contact    Contact? @relation(fields: [contactId], references: [pkId], onDelete: Cascade)
}

model AutoReply {
  pkId      Int      @id @default(autoincrement())
  id        String   @unique @default(uuid()) @db.Uuid
  name      String   @db.VarChar(128)
  request   String[]
  response  String   @db.VarChar(255)
  schedule  DateTime
  status    Boolean  @default(true)
  source    String
  receivers String[]
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")
  deviceId  Int
  device    Device   @relation(fields: [deviceId], references: [pkId], onDelete: Cascade)
}

model Campaign {
  pkId                Int             @id @default(autoincrement())
  id                  String          @unique @default(uuid()) @db.Uuid
  name                String          @db.VarChar(128)
  syntaxRegistration  String          @map("syntax_registration") @db.VarChar(255)
  registrationMessage String          @map("registration_message")
  messageRegistered   String          @map("message_registered")
  phone               String          @unique @db.VarChar(20)
  campaignMessageId   Int             @map("campaign_message_id")
  groupId             Int             @map("group_id")
  deviceId            Int             @map("device_id")
  campaignMessages    CampaignMessage @relation(fields: [campaignMessageId], references: [pkId])
  group               Group           @relation(fields: [groupId], references: [pkId])
  device              Device          @relation(fields: [deviceId], references: [pkId])
}

model CampaignMessage {
  pkId      Int        @id @default(autoincrement())
  id        String     @unique @default(uuid()) @db.Uuid
  day       String     @db.VarChar(128)
  message   String
  sechedule DateTime   @map("sechedule")
  delay     Int
  campaigns Campaign[]
}

model BusinessHour {
  pkId     Int      @id @default(autoincrement())
  id       String   @unique @default(uuid()) @db.Uuid
  message  String
  monStart DateTime @map("mon_start")
  monEnd   DateTime @map("mon_end")
  tueStart DateTime @map("tue_start")
  tueEnd   DateTime @map("tue_end")
  wedStart DateTime @map("wed_start")
  wedEnd   DateTime @map("wed_end")
  thuStart DateTime @map("thu_start")
  thuEnd   DateTime @map("thu_end")
  friStart DateTime @map("fri_start")
  friEnd   DateTime @map("fri_end")
  satStart DateTime @map("sat_start")
  satEnd   DateTime @map("sat_end")
  sunStart DateTime @map("sun_start")
  sunEnd   DateTime @map("sun_end")
  devices  Device[]
}

model Order {
  pkId     Int     @id @default(autoincrement())
  id       String  @unique @default(uuid()) @db.Uuid
  name     String  @db.VarChar(128)
  address  String  @db.VarChar(255)
  phone    Int
  ongkir   Int     @map("delivery_cost")
  price    Decimal @map("price") @db.Decimal(10, 2)
  deviceId Int     @map("device_id")
  device   Device  @relation(fields: [deviceId], references: [pkId])
}

model PasswordReset {
  pkId              Int      @id @default(autoincrement())
  id                String   @unique @default(uuid()) @db.Uuid
  email             String   @unique @db.VarChar(255)
  token             String   @unique @db.VarChar(255)
  resetTokenExpires DateTime @map("reset_token_expires")
  createdAt         DateTime @default(now()) @map("created_at")
}

model Message {
  pkId                            BigInt   @id @default(autoincrement())
  sessionId                       String
  remoteJid                       String
  id                              String
  agentId                         String?
  bizPrivacyStatus                Int?
  broadcast                       Boolean?
  clearMedia                      Boolean?
  duration                        Int?
  ephemeralDuration               Int?
  ephemeralOffToOn                Boolean?
  ephemeralOutOfSync              Boolean?
  ephemeralStartTimestamp         BigInt?
  finalLiveLocation               Json?
  futureproofData                 Bytes?
  ignore                          Boolean?
  keepInChat                      Json?
  key                             Json
  labels                          Json?
  mediaCiphertextSha256           Bytes?
  mediaData                       Json?
  message                         Json?
  messageC2STimestamp             BigInt?
  messageSecret                   Bytes?
  messageStubParameters           Json?
  messageStubType                 Int?
  messageTimestamp                BigInt?
  multicast                       Boolean?
  originalSelfAuthorUserJidString String?
  participant                     String?
  paymentInfo                     Json?
  photoChange                     Json?
  pollAdditionalMetadata          Json?
  pollUpdates                     Json?
  pushName                        String?
  quotedPaymentInfo               Json?
  quotedStickerData               Json?
  reactions                       Json?
  revokeMessageTimestamp          BigInt?
  starred                         Boolean?
  status                          Int?
  statusAlreadyViewed             Boolean?
  statusPsa                       Json?
  urlNumber                       Boolean?
  urlText                         Boolean?
  userReceipt                     Json?
  verifiedBizName                 String?

  @@unique([sessionId, remoteJid, id], map: "unique_message_key_per_session_id")
  @@index([sessionId])
}
